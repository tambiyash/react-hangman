{"version":3,"sources":["components/keyboard.js","components/hidden_word.js","components/game.js","components/start.js","components/playerscore.js","data/words.js","data/players.js","App.js","serviceWorker.js","index.js"],"names":["ROW_ONE","split","ROW_TWO","Keyboard","letter","this","props","enabled","onPress","className","map","row","key","join","disabled","_","includes","disabledLetters","onClick","handleClick","bind","Component","HiddenWord","word","index","guesses","reveal","classNames","contents","contains","push","letterslots","style","paddingRight","paddingTop","Game","keyboardEnabled","onKeyBoardPress","onButtonClick","won","over","color","display","fontSize","turnsleft","id","displayMessage","paddingBottom","hint_one","hint_two","word_name","handlePress","marginTop","classText","handleNewGame","StartUser","e","preventDefault","handleSubmit","refs","mail","value","onSubmit","ref","type","required","placeholder","PlayerScore","players","player","username","score","Id","status","App","newGameUI","shuffwords","shuffle","words","find","item","isEmpty","playersdata","console","log","state","setState","strikes","currentPlayer","active","finish","hasWon","chain","newWord","checkLetter","handleFormSubmit","undefined","playing","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","class","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fbadb868.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'underscore';\n\nconst ROW_ONE = 'abcdefghijklm'.split('');\nconst ROW_TWO = 'nopqrstuvwxyz'.split('');\n\nexport default class Keyboard extends Component {\n\n    handleClick(letter) {\n        if (this.props.enabled) {\n            this.props.onPress(letter);\n        }\n    }\n\n    render() {\n        return (\n            <div className='hangman-keyboard'>\n                {[ROW_ONE, ROW_TWO].map(row => {\n                    return (\n                        <div className='button-row' key={row.join('')}>\n                            {row.map(letter => {\n                                let disabled = _.includes(this.props.disabledLetters, letter);\n                                return (\n                                    <button\n                                        key={letter}\n                                        onClick={this.handleClick.bind(this, letter)}\n                                        disabled={disabled}>\n                                        {letter}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport _ from 'underscore';\n\nexport default class HiddenWord extends Component {\n\n    getSlots() {\n        let letters = this.props.word.split('');\n        return letters.map((letter, index) => {\n            let guesses = this.props.guesses;\n            let reveal = this.props.reveal;\n            let classNames = ['letter-slot'];\n            let contents = _.contains(guesses, letter) ? letter : ' ';\n\n            if (contents === ' ' && reveal) {\n                classNames.push('revealed');\n                contents = letter;\n            }\n\n            return (\n                <div key={index} className={classNames.join(' ')}>\n                    {contents}\n                </div>\n            );\n        });\n    }\n\n    render() {\n        let {reveal, guesses} = this.props;\n        let letters = this.props.word.split('');\n        let letterslots = letters.map((letter, index) => {\n            let classNames = ['letter-slot'];\n            let contents = _.contains(guesses, letter) ? letter : ' ';\n\n            if (contents === ' ' && reveal) {\n                classNames.push('revealed');\n                contents = letter;\n            }\n            return (\n                <div key={index} className={classNames.join(' ')}>\n                    {contents}\n                </div>\n            );            \n        });\n        return (\n            <div style={{ paddingRight: '40%', paddingTop: '10%' }} className='letter-slots'>\n                {letterslots}\n            </div>\n        );\n    }\n};\n","import React, { Component } from 'react';\nimport Keyboard from './keyboard';\nimport HiddenWord from './hidden_word';\n\nexport default class Game extends Component {\n    handlePress(letter) {\n        if (this.props.keyboardEnabled) {\n            this.props.onKeyBoardPress(letter);\n        }\n    }\n\n    handleNewGame() {\n        this.props.onButtonClick();\n    }\n\n    displayMessage(won, over) {\n        if (won && !over) {\n            return <h4 className=\"text-success\"><strong>CONGRATULATIONS... YOU ARE AWESOME !!</strong></h4>;\n        }\n        else if (!won && over) {\n            return <h4 className=\"text-danger\"><strong>GAME OVER... PLEASE TRY AGAIN !!</strong></h4>\n        }\n        else {\n            return <h4 style={{ color: \"#019e93\", display: this.props.over && this.props.won ? 'none' : 'block' }}><strong>Total   <span style={{ fontSize: '1em' }} className=\"btn btn-sm btn-info\"><strong>{this.props.turnsleft}</strong></span>   incorrect tries before you prove YOU ARE AWESOME !!</strong></h4>\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                <div id=\"gamedesc\">\n                    <p><strong>Guess the word.... Tough job ?? Okay, Below is an hint. </strong></p>\n                    <h5><strong>P.S. - You will get another hint after 5 incorrect tries.</strong></h5>\n                    <div>\n                        {this.displayMessage(this.props.won, this.props.over)}\n                    </div>\n                </div>\n\n                <div className=\"row\" id=\"gamelayout\">\n                    <div className=\"col-sm-12\">\n                        <div id=\"hints\" style={{ paddingTop: '1em', paddingBottom: '10%' }}>\n                            <div className=\"col-sm-2\"><h5><strong><span className=\"text-default\">Hint : </span></strong></h5></div>\n                            <div className=\"col-sm-10\"><h5><strong><span className=\"text-default\">{this.props.word.hint_one}</span></strong></h5></div>\n                            <div style={{ display: (this.props.turnsleft <= 1) ? 'block' : 'none' }} className=\"text-danger\">\n                                <div className=\"col-sm-3\"><h5><strong><span className=\"text-default\">Another Hint : </span></strong></h5></div>\n                                <div className=\"col-sm-9\"><h5><strong><span className=\"text-default\">{this.props.word.hint_two}</span></strong></h5></div>\n                            </div>\n                        </div>\n                        <div>\n                            <HiddenWord style={{ paddingTop: '5%' }}\n                                word={this.props.word.word_name}\n                                reveal={this.props.over}\n                                guesses={this.props.guesses} />\n                            <div className=\"col-sm-9\">\n                                <Keyboard\n                                    onPress={this.handlePress.bind(this)}\n                                    enabled={this.props.keyboardEnabled}\n                                    disabledLetters={this.props.guesses} />\n                            </div>\n                            <div className=\"col-sm-3\">\n                                <button style={{ marginTop: '70%' }}\n                                    className={this.props.classText}\n                                    disabled={!this.props.over && !this.props.won}\n                                    onClick={this.handleNewGame.bind(this)}>\n                                    New Game\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\n\nexport default class StartUser extends Component {\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleSubmit(this.refs.mail.value);\n    }\n\n    render() {\n        return (\n            <div id=\"hangmandesc\" className=\"container\">\n                <h1>Hangman is the game we all loved in our childhood.</h1>\n                <br />\n                <h4>Enter email address to continue !! <span className=\"text-primary\">#BeingNostalgic</span></h4>\n                <form id=\"form-login\" className=\"input-lg col-xs-12\" onSubmit={this.handleSubmit.bind(this)}>\n                    <div className=\"input-lg col-xs-6\"><input className=\"form-control\" ref=\"mail\" type=\"email\" id=\"input\" required placeholder=\"username@example.com\" /></div>\n                    <div className=\"input-lg col-xs-2\"><button type=\"Submit\" ref=\"startgame\" className=\"btn btn-danger\"><strong>Enter the ARENA !!</strong></button></div>\n                </form>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\n\nexport default class PlayerScore extends Component {\n\n    render() {\n        let players;\n        if (this.props.players) {\n            players = this.props.players.map(player => {\n                return (\n                    <tr key={player.username} ref={player.username}>\n                        <td>{player.username}</td>\n                        <td>{player.score}</td>\n                    </tr>\n                );\n            });\n        }\n        return (\n            <div>\n                <div>\n                    <h2>Scores:</h2>\n                </div>\n                <div>\n                    <table className=\"table table-condensed table-bordered table-hover\">\n                        <thead className=\"thead-inverse\">\n                            <tr>\n                                <th>Username</th>\n                                <th>Score</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {players}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}","export default [\n    {\n        Id: 1,\n        word_name: \"woman\",\n        hint_one: \"Opposite of MAN\",\n        hint_two: \"She is a .....\",\n        status: 1\n    },\n    {\n        Id: 2,\n        word_name: \"question\",\n        hint_one: \"What do we ask ?\",\n        hint_two: \"It has an Answer\",\n        status: 1\n    },\n    {\n        Id: 3,\n        word_name: \"power\",\n        hint_one: \"Bullies misuse this\",\n        hint_two: \"In science, it is measured in Watts\",\n        status: 1\n    },\n    {\n        Id: 4,\n        word_name: \"authority\",\n        hint_one: \"Power to change things in a system\",\n        hint_two: \"You go to higher ....\",\n        status: 1\n    },\n    {\n        Id: 5,\n        word_name: \"community\",\n        hint_one: \"Humans live in a .....\",\n        hint_two: \"Most cities have ..... halls\",\n        status: 1\n    },\n    {\n        Id: 6,\n        word_name: \"development\",\n        hint_one: \"To develop something\",\n        hint_two: \"Developers do .....\",\n        status: 1\n    },\n    {\n        Id: 7,\n        word_name: \"education\",\n        hint_one: \"Society is incomplete without ......\",\n        hint_two: \"School is the first place where we get ......\",\n        status: 1\n    },\n    {\n        Id: 8,\n        word_name: \"experience\",\n        hint_one: \"When you do something repeatedly, you gain .....\",\n        hint_two: \"Experts have .....\",\n        status: 1\n    }\n]","export default [\n    {\n        username: \"tambiyash@gmail.com\",\n        score: 30\n    },\n]","import React, { Component } from 'react';\nimport Game from './components/game';\nimport StartUser from './components/start';\nimport PlayerScore from './components/playerscore';\nimport words from './data/words';\nimport playersdata from './data/players';\nimport _ from 'underscore';\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            word: {},\n            strikes: 0,\n            guesses: [],\n            over: false,\n            won: false,\n            players: {},\n            currentPlayer: \"\",\n            active: true,\n            finish: false\n        };\n    }\n\n    componentDidMount() {\n        this.newGameUI();\n        if (this.state.word === undefined) {\n            this.setState({ finish: true });\n        }\n    }\n\n    newGameUI = () => {\n        let shuffwords = _.shuffle(words);\n        let word = _.find(shuffwords, item => { return item.status === 1 });\n        if (_.isEmpty(word)) {\n            word = false;\n        }\n        let strikes = 6;\n        let guesses = [];\n        let over = false;\n        let won = false;\n        let players = playersdata;\n        let currentPlayer = \"\";\n        let active = true;\n        let finish = false;\n        console.log(this.state);\n        this.setState({ word, strikes, guesses, over, won, players, currentPlayer, active, finish });\n    }\n\n    hasWon = () => {\n        let {word, guesses} = this.state;\n        return !_.chain(word.word_name.split(''))\n            .map(letter => _.contains(guesses, letter))\n            .contains(false)\n            .value();\n    }\n\n    newWord = () => {\n        const word = this.state.word;\n        word.status = 0;\n        this.setState({ word: word });\n    }\n\n    checkLetter = (letter) => {\n        let {word, strikes, guesses, over, won} = this.state;\n        if (_.contains(word.word_name, letter)) {\n\n        }\n        else {\n            strikes--;\n        }\n\n        guesses.push(letter);\n        won = this.hasWon();\n\n        if (strikes <= 0 && !won) {\n            strikes = 0;\n            over = true;\n            this.newWord();\n        }\n\n        if (won) {\n            this.newWord();\n            let players = this.state.players;\n            _.map(players, item => {\n                if (item.username === this.state.currentPlayer) {\n                    item.score += 30;\n                }\n            });\n            this.setState({ players: players });\n        }\n\n        this.setState({ strikes, guesses, over, won });\n    }\n\n    handleFormSubmit = (mail) => {\n        let {players, active, currentPlayer} = this.state;\n        let player = _.find(players, (item) => item.username === mail);\n        if (!player) {\n            player = {\n                username: mail,\n                score: 0\n            }\n            players.push(player);\n        }\n\n        currentPlayer = player.username;\n        active = !active;\n        this.setState({ players, active, currentPlayer });\n    }\n\n    render() {\n        let playing = (!this.state.over && !this.state.won) ? 'new-game' : 'new-game-shown';\n        return (\n            <div className=\"container\">\n                {!this.state.word ?\n                    <section>\n                        <h1>Words Exhausted. Thank You for playing !!</h1>\n                    </section> :\n                    (this.state.active ?\n                        <div className=\"row\">\n                            <div id=\"gamesection\" className=\"col-sm-12\">\n                                <StartUser ref='form' handleSubmit={this.handleFormSubmit} />\n                            </div>\n                        </div> :\n                        <div className=\"row\">\n                            <div className=\"container\">\n                                <div id=\"gamesection\" className=\"col-sm-8\">\n                                    <Game\n                                        word={this.state.word}\n                                        over={this.state.over}\n                                        won={this.state.won}\n                                        keyboardEnabled={!this.state.over && !this.state.won}\n                                        guesses={this.state.guesses}\n                                        onKeyBoardPress={this.checkLetter}\n                                        classText={playing}\n                                        turnsleft={this.state.strikes}\n                                        onButtonClick={this.newGameUI}\n                                    />\n                                </div>\n                                <div id=\"playersection\" className=\"col-sm-4\">\n                                    <PlayerScore players={this.state.players} />\n                                </div>\n                            </div>\n                        </div>)\n                }\n            </div>\n        );\n    }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <header>\n        <div class=\"container\">\n            <div id=\"brand_logo\">\n                <h1><span class=\"highlight table\">Hangman</span>, Do Or Die !!</h1>\n            </div>\n        </div>\n      </header>\n      <App />\n      <footer>\n          <kbd>Design by Yash Tambi, Copyright &copy; 2017</kbd>\n      </footer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}