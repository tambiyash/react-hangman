{"version":3,"sources":["components/keyboard.js","components/hidden_word.js","components/game.js","components/start.js","components/playerscore.js","data/words.js","data/players.js","App.js","serviceWorker.js","index.js"],"names":["ROW_ONE","split","ROW_TWO","ROW_THREE","Keyboard","Component","handleClick","letter","this","props","enabled","onPress","render","React","createElement","className","map","row","key","join","disabled","_","includes","disabledLetters","onClick","bind","HiddenWord","getSlots","word","index","guesses","reveal","classNames","contents","contains","push","letterslots","Game","handlePress","keyboardEnabled","onKeyBoardPress","handleNewGame","onButtonClick","displayMessage","won","over","style","color","display","fontSize","turnsleft","id","Fragment","hint_one","hint_two","paddingTop","word_name","classText","StartUser","handleSubmit","e","preventDefault","refs","mail","value","onSubmit","ref","type","required","placeholder","PlayerScore","players","player","username","score","Id","status","App","constructor","super","newGameUI","shuffwords","shuffle","words","find","item","isEmpty","playersdata","console","log","state","setState","strikes","currentPlayer","active","finish","hasWon","chain","newWord","checkLetter","handleFormSubmit","componentDidMount","undefined","playing","Boolean","window","location","hostname","match","ReactDOM","StrictMode","class","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f6ec073.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'underscore';\n\nconst ROW_ONE = 'qwertyuiop'.split('');\nconst ROW_TWO = 'asdfghjkl'.split('');\nconst ROW_THREE = 'zxcvbnm'.split('');\n\nexport default class Keyboard extends Component {\n    handleClick(letter) {\n        if (this.props.enabled) {\n            this.props.onPress(letter);\n        }\n    }\n\n    render() {\n        return (\n            <div className='hangman-keyboard'>\n                {[ROW_ONE, ROW_TWO, ROW_THREE].map(row => {\n                    return (\n                        <div className='button-row' key={row.join('')}>\n                            {row.map(letter => {\n                                let disabled = _.includes(this.props.disabledLetters, letter);\n                                return (\n                                    <button\n                                        key={letter}\n                                        onClick={this.handleClick.bind(this, letter)}\n                                        disabled={disabled}>\n                                        {letter}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport _ from 'underscore';\n\nexport default class HiddenWord extends Component {\n\n    getSlots() {\n        let letters = this.props.word.split('');\n        return letters.map((letter, index) => {\n            let guesses = this.props.guesses;\n            let reveal = this.props.reveal;\n            let classNames = ['letter-slot'];\n            let contents = _.contains(guesses, letter) ? letter : ' ';\n\n            if (contents === ' ' && reveal) {\n                classNames.push('revealed');\n                contents = letter;\n            }\n\n            return (\n                <div key={index} className={classNames.join(' ')}>\n                    {contents}\n                </div>\n            );\n        });\n    }\n\n    render() {\n        let {reveal, guesses} = this.props;\n        let letters = this.props.word.split('');\n        let letterslots = letters.map((letter, index) => {\n            let classNames = ['letter-slot'];\n            let contents = _.contains(guesses, letter) ? letter : ' ';\n\n            if (contents === ' ' && reveal) {\n                classNames.push('revealed');\n                contents = letter;\n            }\n            return (\n                <div key={index} className={classNames.join(' ')}>\n                    {contents}\n                </div>\n            );            \n        });\n        return (\n            <div className='letter-slots'>\n                {letterslots}\n            </div>\n        );\n    }\n};\n","import React, { Component } from 'react';\nimport Keyboard from './keyboard';\nimport HiddenWord from './hidden_word';\n\nexport default class Game extends Component {\n    handlePress(letter) {\n        if (this.props.keyboardEnabled) {\n            this.props.onKeyBoardPress(letter);\n        }\n    }\n\n    handleNewGame() {\n        this.props.onButtonClick();\n    }\n\n    displayMessage(won, over) {\n        if (won && !over) {\n            return <h4 className=\"text-success\"><strong>CONGRATULATIONS... YOU ARE AWESOME !!</strong></h4>;\n        }\n        else if (!won && over) {\n            return <h4 className=\"text-danger\"><strong>GAME OVER... PLEASE TRY AGAIN !!</strong></h4>\n        }\n        else {\n            return (\n                <h4 style={{ color: \"#019e93\", display: this.props.over && this.props.won ? 'none' : 'block' }}>\n                    <strong>Total   \n                        <span style={{ fontSize: '1em' }} className={this.props.turnsleft === 1 ? \"btn-danger\" : \"btn-info\"}>\n                            <strong>{this.props.turnsleft}</strong>\n                        </span>   incorrect tries before you prove YOU ARE AWESOME !!\n                    </strong>\n                </h4>\n            );\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"game-container\">\n                <div id=\"gamedesc\">\n                    <p><strong>Guess the word.... Tough job ?? Okay, Below is an hint. </strong></p>\n                    <h5><strong>P.S. - You will get another hint after 5 incorrect tries.</strong></h5>\n                    <div>\n                        {this.displayMessage(this.props.won, this.props.over)}\n                    </div>\n                </div>\n\n                <div className=\"row\" id=\"gamelayout\">\n                    <>\n                        <div id=\"hints\">\n                            <h5><strong><span className=\"text-default\">Hint : </span></strong></h5>\n                            <h5><strong><span className=\"text-default\">{this.props.word.hint_one}</span></strong></h5>\n                            <div style={{ display: (this.props.turnsleft <= 1) ? 'block' : 'none' }} className=\"text-danger\">\n                                <h5><strong><span className=\"text-default\">Another Hint : </span></strong></h5>\n                                <h5><strong><span className=\"text-default\">{this.props.word.hint_two}</span></strong></h5>\n                            </div>\n                        </div>\n                        <>\n                            <HiddenWord style={{ paddingTop: '5%' }}\n                                word={this.props.word.word_name}\n                                reveal={this.props.over}\n                                guesses={this.props.guesses} />\n                            <Keyboard\n                                onPress={this.handlePress.bind(this)}\n                                enabled={this.props.keyboardEnabled}\n                                disabledLetters={this.props.guesses} />\n                        \n                            <button\n                                className={this.props.classText}\n                                disabled={!this.props.over && !this.props.won}\n                                onClick={this.handleNewGame.bind(this)}>\n                                New Game\n                            </button>\n                        </>\n                    </>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\n\nexport default class StartUser extends Component {\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleSubmit(this.refs.mail.value);\n    }\n\n    render() {\n        return (\n            <div id=\"hangmandesc\" className=\"container\">\n                <h1>Hangman is the game we all loved in our childhood.</h1>\n                <br />\n                <h4>Enter email address to continue !! <span className=\"text-primary\">#BeingNostalgic</span></h4>\n                <form id=\"form-login\" className=\"\" onSubmit={this.handleSubmit.bind(this)}>\n                    <div className=\"\">\n                        <input className=\"form-control\" ref=\"mail\" type=\"email\" id=\"input\" required placeholder=\"Enter email\" />\n                    </div>\n                    <div className=\"\">\n                        <button type=\"Submit\" ref=\"startgame\">\n                            <strong>Enter the ARENA !!</strong>\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\n\nexport default class PlayerScore extends Component {\n\n    render() {\n        let players;\n        if (this.props.players) {\n            players = this.props.players.map(player => {\n                return (\n                    <tr key={player.username} ref={player.username}>\n                        <td>{player.username}</td>\n                        <td>{player.score}</td>\n                    </tr>\n                );\n            });\n        }\n        return (\n            <div>\n                <div>\n                    <h2>Scores:</h2>\n                </div>\n                <div>\n                    <table className=\"table table-condensed table-bordered table-hover\">\n                        <thead className=\"thead-inverse\">\n                            <tr>\n                                <th>Username</th>\n                                <th>Score</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {players}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}","export default [\n    {\n        Id: 1,\n        word_name: \"woman\",\n        hint_one: \"Opposite of MAN\",\n        hint_two: \"She is a .....\",\n        status: 1\n    },\n    {\n        Id: 2,\n        word_name: \"question\",\n        hint_one: \"What do we ask ?\",\n        hint_two: \"It has an Answer\",\n        status: 1\n    },\n    {\n        Id: 3,\n        word_name: \"power\",\n        hint_one: \"Bullies misuse this\",\n        hint_two: \"In science, it is measured in Watts\",\n        status: 1\n    },\n    {\n        Id: 4,\n        word_name: \"authority\",\n        hint_one: \"Power to change things in a system\",\n        hint_two: \"You go to higher ....\",\n        status: 1\n    },\n    {\n        Id: 5,\n        word_name: \"community\",\n        hint_one: \"Humans live in a .....\",\n        hint_two: \"Most cities have ..... halls\",\n        status: 1\n    },\n    {\n        Id: 6,\n        word_name: \"development\",\n        hint_one: \"To develop something\",\n        hint_two: \"Developers do .....\",\n        status: 1\n    },\n    {\n        Id: 7,\n        word_name: \"education\",\n        hint_one: \"Society is incomplete without ......\",\n        hint_two: \"School is the first place where we get ......\",\n        status: 1\n    },\n    {\n        Id: 8,\n        word_name: \"experience\",\n        hint_one: \"When you do something repeatedly, you gain .....\",\n        hint_two: \"Experts have .....\",\n        status: 1\n    }\n]","export default [\n    {\n        username: \"tambiyash@gmail.com\",\n        score: 30\n    },\n]","import React, { Component } from 'react';\nimport Game from './components/game';\nimport StartUser from './components/start';\nimport PlayerScore from './components/playerscore';\nimport words from './data/words';\nimport playersdata from './data/players';\nimport _ from 'underscore';\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            word: {},\n            strikes: 0,\n            guesses: [],\n            over: false,\n            won: false,\n            players: {},\n            currentPlayer: \"\",\n            active: true,\n            finish: false\n        };\n    }\n\n    componentDidMount() {\n        this.newGameUI();\n        if (this.state.word === undefined) {\n            this.setState({ finish: true });\n        }\n    }\n\n    newGameUI = () => {\n        let shuffwords = _.shuffle(words);\n        let word = _.find(shuffwords, item => { return item.status === 1 });\n        if (_.isEmpty(word)) {\n            word = false;\n        }\n        let strikes = 6;\n        let guesses = [];\n        let over = false;\n        let won = false;\n        let players = playersdata;\n        let currentPlayer = \"\";\n        let active = true;\n        let finish = false;\n        console.log(this.state);\n        this.setState({ word, strikes, guesses, over, won, players, currentPlayer, active, finish });\n    }\n\n    hasWon = () => {\n        let {word, guesses} = this.state;\n        return !_.chain(word.word_name.split(''))\n            .map(letter => _.contains(guesses, letter))\n            .contains(false)\n            .value();\n    }\n\n    newWord = () => {\n        const word = this.state.word;\n        word.status = 0;\n        this.setState({ word: word });\n    }\n\n    checkLetter = (letter) => {\n        let {word, strikes, guesses, over, won} = this.state;\n        if (_.contains(word.word_name, letter)) {\n\n        }\n        else {\n            strikes--;\n        }\n\n        guesses.push(letter);\n        won = this.hasWon();\n\n        if (strikes <= 0 && !won) {\n            strikes = 0;\n            over = true;\n            this.newWord();\n        }\n\n        if (won) {\n            this.newWord();\n            let players = this.state.players;\n            _.map(players, item => {\n                if (item.username === this.state.currentPlayer) {\n                    item.score += 30;\n                }\n            });\n            this.setState({ players: players });\n        }\n\n        this.setState({ strikes, guesses, over, won });\n    }\n\n    handleFormSubmit = (mail) => {\n        let {players, active, currentPlayer} = this.state;\n        let player = _.find(players, (item) => item.username === mail);\n        if (!player) {\n            player = {\n                username: mail,\n                score: 0\n            }\n            players.push(player);\n        }\n\n        currentPlayer = player.username;\n        active = !active;\n        this.setState({ players, active, currentPlayer });\n    }\n\n    render() {\n        let playing = (!this.state.over && !this.state.won) ? 'new-game' : 'new-game-shown';\n        return (\n            <div className=\"container\">\n                {!this.state.word ?\n                    <section>\n                        <h1>Words Exhausted. Thank You for playing !!</h1>\n                    </section> :\n                    (this.state.active ?\n                        <div className=\"row\">\n                            <div id=\"gamesection\" className=\"col-sm-12\">\n                                <StartUser ref='form' handleSubmit={this.handleFormSubmit} />\n                            </div>\n                        </div> :\n                        <div className=\"row\">\n                            <div className=\"container\">\n                                <div id=\"gamesection\" className=\"col-sm-8\">\n                                    <Game\n                                        word={this.state.word}\n                                        over={this.state.over}\n                                        won={this.state.won}\n                                        keyboardEnabled={!this.state.over && !this.state.won}\n                                        guesses={this.state.guesses}\n                                        onKeyBoardPress={this.checkLetter}\n                                        classText={playing}\n                                        turnsleft={this.state.strikes}\n                                        onButtonClick={this.newGameUI}\n                                    />\n                                </div>\n                                <div id=\"playersection\" className=\"col-sm-4\">\n                                    <PlayerScore players={this.state.players} />\n                                </div>\n                            </div>\n                        </div>)\n                }\n            </div>\n        );\n    }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <header>\n        <div class=\"container\">\n            <div id=\"brand_logo\">\n                <h1><span class=\"highlight table\">Hangman</span>, Do Or Die !!</h1>\n            </div>\n        </div>\n      </header>\n      <App />\n      <footer>\n          <kbd>Design by Yash Tambi, Copyright &copy; 2017</kbd>\n      </footer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}